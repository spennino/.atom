{"scopeName":"source.skip","name":"Skip","fileTypes":["sk"],"patterns":[{"include":"#core"}],"repository":{"core":{"patterns":[{"include":"#top-level-word"},{"include":"#class-definition"},{"include":"#expression"}]},"expression":{"patterns":[{"include":"#comment"},{"include":"#function-definition"},{"include":"#constant-definition"},{"include":"#type-annotation"},{"include":"#at-modifier"},{"include":"#keyword"},{"include":"#literal"},{"include":"#variable"},{"include":"#operator"},{"include":"#brackets"},{"include":"#string-interpolation"}]},"comment":{"patterns":[{"name":"comment.block.skip","begin":"\\s*+/\\*","end":"\\s*\\*/","captures":{"0":{"name":"punctuation.definition.comment.skip"}}},{"name":"comment.line.double-slash.skip","begin":"\\s*+(//)","end":"\\s*$","beginCaptures":{"1":{"name":"punctuation.definition.comment.skip"}}}]},"class-definition":{"patterns":[{"begin":"\\b(class)\\s+(\\.|[A-Z]\\w*)","beginCaptures":{"1":{"name":"storage.type.class.skip"},"2":{"name":"entity.name.class.skip"}},"end":"(?=[^\\s<\\(])","patterns":[{"include":"#comment"},{"include":"#type-parameters"},{"include":"#paren-parameters"}]},{"begin":"\\b(extends|implements)\\b","beginCaptures":{"1":{"name":"storage.modifier.extends.skip"}},"end":"(?=[^\\sA-Z\\.<,])","patterns":[{"include":"#comment"},{"include":"#inherited-class"},{"include":"#type-parameters"},{"name":"punctuation.separator.skip","match":","}]}]},"inherited-class":{"patterns":[{"name":"entity.other.inherited-class.skip","match":"\\b([A-Z]\\w*)\\b"},{"name":"keyword.operator.skip","match":"\\."}]},"function-definition":{"begin":"(?x)\n\\b (fun) \\s+\n(\n  [_a-z]\\w*\\b\n  | == | != | <= | >= | < | >\n  | \\+ | - | \\* | \\/ | %\n  | ! | && | \\|\\|\n)","beginCaptures":{"1":{"name":"storage.type.function.skip"},"2":{"name":"entity.name.function.skip"}},"end":"(?x)\n(?=\n  ; | { | :\n)","patterns":[{"include":"#comment"},{"include":"#type-parameters"},{"include":"#when-parameters"},{"include":"#paren-parameters"}]},"constant-definition":{"match":"\\b(const)\\s+([_a-z]\\w*)\\b","captures":{"1":{"name":"storage.type.modifier.skip"},"2":{"name":"entity.name.constant.skip"}}},"paren-parameters":{"comment":"Class and function positional parameters could be unnamed and only have a\ntype, so they must be parsed separately","name":"meta.parameters.skip","begin":"\\(","beginCaptures":{"0":{"name":"meta.brace.round.skip"}},"end":"\\)","endCaptures":{"0":{"name":"meta.brace.round.skip"}},"patterns":[{"include":"#comment"},{"include":"#keyword"},{"comment":"If a parameter's name is \"this\", \"inst\", \"void\", or \"_\", it could get\nparsed as a type. This rule catches parameter names followed by a\ncolon to prevent that. It won't work if the colon is on another line\nor is preceded by a comment, but this is rare enough that it hopefully\nwon't be an issue.","name":"entity.name.identifier.skip","match":"\\b([_a-z]\\w*)\\b(?=\\s*:)"},{"include":"#type"},{"include":"#variable"},{"include":"#type-annotation"},{"name":"punctuation.separator.skip","match":","}]},"type-annotation":{"name":"meta.type.annotation.skip","begin":"(?<!:):(?!:)","beginCaptures":{"0":{"name":"punctutation.type.skip"}},"end":"(?x)\n(?=\n  , | ; | = | { | } | \\) | \\| | from\n)","patterns":[{"include":"#type"}]},"type":{"patterns":[{"name":"support.type.skip","match":"(?x)\n\\b(\n  _ | inst | this | void\n)\\b"},{"name":"support.type.skip","match":"\\b([A-Z]\\w*)\\b"},{"name":"keyword.operator.skip","match":"(?x)\n\\? | ` | -> | :: | : | & | \\+ | -"},{"include":"#paren-parameters"},{"include":"#comment"},{"include":"#type-parameters"},{"include":"#keyword"}]},"type-parameters":{"name":"meta.type.parameters.skip","begin":"<","beginCaptures":{"0":{"name":"meta.brace.angle.skip"}},"end":">","endCaptures":{"0":{"name":"meta.brace.angle.skip"}},"patterns":[{"include":"#type"},{"name":"punctuation.separator.skip","match":","}]},"when-parameters":{"name":"meta.when.parameters.skip","begin":"\\[","beginCaptures":{"0":{"name":"meta.brace.square.skip"}},"end":"\\]","endCaptures":{"0":{"name":"meta.brace.square.skip"}},"patterns":[{"include":"#type"},{"name":"punctuation.separator.skip","match":","}]},"at-modifier":{"name":"entity.other.attribute-name.skip","match":"(@\\w+)\\b"},"keyword":{"name":"keyword.control.skip","comment":"Reserved words, except this and void (highlighted separately)","match":"(?x)\n\\b(\n  alias | as | async | await | catch | children | class | concurrent |\n  const | deferred | else | extends | final | from | frozen | fun | if |\n  match | memoized | module | mutable | native | overridable | private |\n  protected | readonly | static | throw | trait | try | type | untracked |\n  uses | when | with | matches | return\n)\\b"},"top-level-word":{"comment":"Words that are not reserved words but have special meaning ","name":"storage.type.skip","match":"(?x)\n\\b(\n  base | value | end | extension\n)\\b"},"variable":{"patterns":[{"name":"constant.language.skip","match":"(?x)\n\\b(\n  false | true | void\n)\\b"},{"name":"support.function.skip","match":"(?x)\n\\b(\n  open_file | string_to_file | debug | debug_break | print_string |\n  now | profile_start | profile_pause | profile_resume |\n  profile_stop | print_raw | print_error | arguments |\n  print_stack_trace | print_last_exception_stack_trace_and_exit |\n  exit | internalExit | invariant_violation | invariant | getcwd\n)\\b"},{"name":"variable.language.this.skip","match":"\\b(this)\\b"},{"name":"entity.name.identifier.skip","match":"\\b([_a-z]\\w*)\\b"},{"name":"entity.name.class.skip","match":"\\b([A-Z]\\w*)\\b"}]},"operator":{"patterns":[{"name":"keyword.operator.skip","match":"(?x)\n(\n  -> | => # arrows\n  | =\\s*\\. | =(?!=) | <- # assignment\n  | \\. | :: # access\n  | <= | >= | < | > | == | != # comparison\n  | && | \\|\\| | ! # boolean\n  | \\+ | - | \\* | \\/ | % | & | \\| # arithmetic\n)"},{"name":"punctuation.separator.skip","match":",|;"}]},"brackets":{"patterns":[{"begin":"\\(","beginCaptures":{"0":{"name":"meta.brace.round.skip"}},"end":"\\)","endCaptures":{"0":{"name":"meta.brace.round.skip"}},"patterns":[{"include":"#expression"}]},{"begin":"{","beginCaptures":{"0":{"name":"meta.brace.curly.skip"}},"end":"}","endCaptures":{"0":{"name":"meta.brace.curly.skip"}},"patterns":[{"include":"#expression"}]}]},"literal":{"patterns":[{"name":"string.quoted.double.skip","begin":"(b)?(\")","beginCaptures":{"1":{"name":"storage.type.string.skip"},"2":{"name":"punctuation.definition.string.begin.skip"}},"end":"\"","endCaptures":{"0":{"name":"punctuation.definition.string.end.skip"}},"patterns":[{"include":"#string-char"}]},{"name":"string.quoted.single.skip","begin":"(b)?(')","beginCaptures":{"1":{"name":"storage.type.string.skip"},"2":{"name":"punctuation.definition.string.begin.skip"}},"end":"'","endCaptures":{"0":{"name":"punctuation.definition.string.end.skip"}},"patterns":[{"include":"#string-char"}]},{"match":"\\b(([0-9]+(\\.[0-9]+)?)((e|E)(\\+|-)?[0-9]+)?)\\b","name":"constant.numeric.skip"}]},"string-char":{"patterns":[{"name":"constant.character.escape.skip","match":"(?x)\n# note: \\\\ is one backslash\n\\\\(\n  \\\\\n  | [abefnrtv'\"?]\n  | [0-7]{1,3}\n  | x[a-fA-F0-9]{2}\n  | u[a-fA-F0-9]{4}\n)"},{"name":"invalid.illegal.unknown-escape.skip","match":"\\\\."}]},"string-interpolation":{"patterns":[{"name":"string.interpolation.skip","begin":"`","beginCaptures":{"0":{"name":"punctuation.definition.string.interpolation.begin.skip"}},"end":"`","endCaptures":{"0":{"name":"punctuation.definition.string.interpolation.end.skip"}},"patterns":[{"name":"variable.parameter.skip","begin":"\\${","beginCaptures":{"0":{"name":"punctuation.definition.variable.interpolation.begin.skip"}},"end":"}","endCaptures":{"0":{"name":"punctuation.definition.variable.interpolation.end.skip"}},"patterns":[{"include":"#expression"}]},{"include":"#string-char"}]}]}}}